\chapter{Introduzione a MatLab}
\section{Appunti video lezione 2020 da Moodle} % riga commentabile
\subsection{Ambienti di lavoro}
\subsubsection{Command Window e Workspace}
\begin{itemize}
    \item \underline{Command Window}: finestra di comando, dove andiamo effettivamente a scrivere i comandi.
    \item \underline{Workspace}: variabili in memoria, vediamo le variabili che abbiamo istanziato, mi dà un feedback immediato di quello che ho fatto.
\end{itemize}

\subsubsection{Variabili}
\begin{verbatim}
    >> pippo = 10
    pippo =
        10
    >>
\end{verbatim}
Questo vuol dire che istanziare una variabile assegnandole anche un valore numerico, dopo che ho premuto invio mi viene creata in memoria la variabile che ho creato (lo vedo nel workspace che l'ho creata). Però scrivendo così mi viene anche stampato a schermo il comando che ha eseguito.\\
Nel workspace vedo che ho una variabile chiamata pippo che ha valore 10, size 1x1 e class double.\\
Questo vuol dire che ha dimensione 1x1, cioè che è una singola cella (MatLab lavora con dati che sono matrici). Inoltre, double è il valore base, di default, quasi tutto viene fatto in virgola mobile (ci possono essere forzature se necessario).\\
Ci sono operazioni più complesse però di semplici assegnamenti, per cui potrebbe tornare utile evitare di stampare a schermo, perché non è assolutamente necessario vedere live l'output del comando che viene eseguito. Perciò:
\begin{verbatim}
    >> pluto = 10;
    >>
\end{verbatim}

\subsection{Lista di comandi utili}
\begin{description}
    \item[>> clear:] pulisce il workspace, cancella tutte le variabili che ho istanziato.
    \item[>> clc:] pulisce il command window, cancella tutti i commenti che ho scritto.
    \item[freccia su tastiera:] va a riprendere l'\textit{history} dei miei comandi nella command window, che apre in una finestrella pop-up.
\end{description}

\subsection{Operazioni matematiche}
\subsubsection{Addizione}
\begin{verbatim}
    >> a = 2;
    >> b = 1;
    >> c = a + b;
\end{verbatim}
\subsubsection{Sottrazione}
\begin{verbatim}
    >> a = 2;
    >> b = 1;
    >> c = a - b;

    ans =

        1
\end{verbatim}
\subsubsection{Prodotto}
\begin{verbatim}
    >> a = 2;
    >> b = 1;
    >> c = a * b;

    ans =

        2
\end{verbatim}
\subsubsection{Divisione}
\begin{verbatim}
    >> a = 2;
    >> b = 1;
    >> c = a / b;

    ans =

        2
\end{verbatim}
\subsubsection{Elevamento a potenza}
\begin{verbatim}
    >> a = 2;
    >> a^3;

    ans =

        8
\end{verbatim}
MatLab richiede che il valore di un'operazione venga associato ad una variabile. Se non la creo io, lo fa MatLab per me (qua la variabile "\texttt{ans}"). Visibile nel \textit{Workspace}.\\
Questa variabile può essere riutilizzata.
\begin{verbatim}
    >> a + ans;

    ans =

        10
\end{verbatim}
Però ocio che ad ogni operazione verrà sovrascritta.
\subsubsection{Altre operazioni}
Si può operare in tanti modi con gli scalari su MatLab; per vedere le operazioni possibili, si deve consultare la documentazione.

\subsection{La documentazione}
\begin{enumerate}
    \item Tasto "\textit{Help}" in "Resources"
    \item In Command Window possiamo chiederlo direttamente a MatLab:
    \begin{description}
        \item[$\triangleright$] comando "\texttt{help}", mi dà dei suggerimenti sull'ultima operazione eseguita.
        \item[$\triangleright$] comando "\texttt{help max}", (dove "\texttt{max}" è un esempio di operazione che dà in output il massimo numero in un array di numeri dati in input) mi dice quale è la sintassi con tutte le sue alternative dell'operazione richiesta.
        \item[$\triangleright$] comando "\texttt{lookfor max}", (dove "\texttt{max}" è un esempio di parte del nome di un'operazione che non ci ricordiamo nella sua interezza) mi dà una lista di possibili operazioni che potrebbero essere quella che stiamo cercando e che contengono il pezzo di nome che gli ho assegnato.
    \end{description}
\end{enumerate}

\subsection{Gli array}
\subsubsection{Sintassi varie}
I vettori sono rappresentati come concatenazione di valori, secondo la sintassi:
\begin{verbatim}
    >> v = [1,2,3,4,5,6];
    >> v

    v =

        1   2     3     4     5     6

    >>
\end{verbatim}
Nel workspace vedremo:
\begin{center}
    \begin{tabular}{|p{30mm}|p{30mm}|p{30mm}|p{30mm}|}
        \hline
        Name & Value & Size & Class\\
        \hline
        \texttt{v} & \texttt{[1,2,3,4,5,6]} & \texttt{1x6} & \texttt{double}\\
        \hline
    \end{tabular}
\end{center}
In questo caso è un \textbf{vettore riga}.\\
Le \textit{parentesi quadre} si usano per \textbf{concatenare} i valori, le \textit{virgole} per separare i valori in un \textit{vettore riga}, i \textit{punti e virgola} per separare i valori in un \textit{vettore colonna}.\\
Se invece volessimo un \textbf{vettore colonna}:
\begin{verbatim}
    >> w = [10;20;30;40];    
    >> w 

    w =

        10
        20
        30
        40

    >>
\end{verbatim}
Nel workspace vedremo
\begin{center}
    \begin{tabular}{|p{30mm}|p{30mm}|p{30mm}|p{30mm}|}
        \hline
        Name & Value & Size & Class\\
        \hline
        \texttt{w} & \texttt{[10;20;30;40]} & \texttt{4x1} & \texttt{double}\\
        \hline
    \end{tabular}
\end{center}
N.B.: sono \textit{\textbf{indicizzabili}}. Per indicizzare si usano le \textit{parentesi tonde} e, cosa importantissima, \textit{in MatLab \textbf{non esiste l'indice 0}, perciò si parte da 1 e non da 0}. Se si scrive lo 0 come indice, dà errore.\\
Se volessimo ad esempio il terzo elemento del vettore \texttt{v}:
\begin{verbatim}
    >> v(3)

    ans =

        3

    >>
\end{verbatim}
Questa indicizzazione la possiamo usare anche in assegnazione:
\begin{verbatim}
    >> v(3) = 100;
    >> v

    v =

        1   2     100     4     5     6

    >>
\end{verbatim}
Posso lavorare anche su \textit{serie di cellette} invece di una celletta singola:
\begin{verbatim}
    >> v = (1:3);

    ans =

        1   2     100

    >> v = (1:3);

    ans =

        4     5     6

    >>
\end{verbatim}
Se volessi, senza sapere quanto è lungo un vettore (c'è un modo per saperlo, ma non lo vediamo ora), prendere tutti gli elementi da un certo indice fino alla fine, posso fare:
\begin{verbatim}
    >> v(4:end)

    ans =

        4     5     6

    >>
\end{verbatim}
Scoprire la lunghezza di un vettore:
\begin{verbatim}
    >> size(v)

    ans =

        1   6

    >>
\end{verbatim}
Ovvero una riga e 6 colonne. La convenzione (è sempre così) è prima righe e poi colonne, perciò 
se volessi conoscere solo le righe:
\begin{verbatim}
    >> size(v,1)

    ans =

        1

    >>
\end{verbatim}
se volessi conoscere solo le colonne:
\begin{verbatim}
    >> size(v,2)

    ans =

        6

    >>
\end{verbatim}

\subsubsection{Operazioni sugli array}
\begin{description}
    \item[Somma:] come sappiamo da GAL, se sommo due vettori devono avere la stessa dimensione, altrimenti non posso sommarli.
    \item[Prodotto:] come sappiamo da GAL, se moltiplico due vettori devono avere gli stessi indici interni, altrimenti non posso moltiplicarli. Es.: noi abbiamo \texttt{v 1x6} e \texttt{w 4x1}, non posso moltiplicarli perché $6 \neq 4$.\\
    Una cosa che potrei fare per ovviare il problema sarebbe selezionare un sotto vettore da \texttt{v} che abbia la stessa dimensione di \texttt{w}:
    \begin{verbatim}
        >> v(1:4)*w

        ans =

            3210

        >>
    \end{verbatim}
    Per chi non ha ancora visto GAL, questo è un prodotto scalare, ma perché \texttt{ans} vale \texttt{3210}? Praticamente ho due matrici $m \times p$ e $p \times n$, la dimensione della matrice prodotto sarà $m \times n$. Quindi qua ho un vettore riga $1 \times 4$ e un vettore colonna $4 \times 1$, il prodotto sarà un vettore riga $1 \times 1$, che è quello che vediamo in \texttt{ans}. Inoltre il prodotto fra:
    \begin{center}
        \begin{tabular}{ p{0.35\linewidth} p{0.25\linewidth} p{0.3\linewidth} }
            una matrice & & e una matrice \\
        \end{tabular}
        \begin{tabular}{ p{0.1\linewidth} p{0.1\linewidth} p{0.1\linewidth} p{0.175\linewidth} p{0.1\linewidth} p{0.1\linewidth} }
            $a_1$ & $a_2$ & $a_3$ & & $b_1$ & $b_2$ \\
            $a_4$ & $a_5$ & $a_6$ & & $b_3$ & $b_4$ \\
             & & & & $b_5$ & $b_6$
        \end{tabular}
    \end{center}
    mi dà una matrice $2 \times 2$ con i valori:    
    \begin{center}
        \begin{tabular}{ p{0.4\linewidth} p{0.4\linewidth} }
            $a_1*b_1 + a_2*b_3 + a_3*b_5$ & $a_1*b_2 + a_2*b_4 + a_3*b_6$  \\
            $a_4*b_1 + a_5*b_3 + a_6*b_5$ & $a_4*b_2 + a_5*b_4 + a_6*b_6$  
        \end{tabular}
    \end{center}
    \`E quello che succede se:
    \begin{verbatim}
        >> z = v(1:4)

        z =

            1   2     100     4

        >> w*z

        ans =

            10   20     1000     40
            20   40     2000     80
            30   60     3000     120
            40   80     4000     160

        >>
    \end{verbatim}
    \item[Valore massimo:] \texttt{max(v)} mi ritorna il valore massimo fra i numeri del vettore. Per visualizzare le varianti, basta scrivere \texttt{max} e aprire la parentesi tonda sinistra e in sovrimpressione uscirà la lista delle varianti. In questo caso:
    \begin{verbatim}
        >> max(v)

        ans =

            100

        >>
    \end{verbatim}
    \item[Somma dei valori:] \texttt{sum(v)} mi ritorna il valore totale della somma dei numeri del vettore. Questo, come il comando precedente, ha un comportamento diverso se si tratta di vettori o di array. In questo caso:
    \begin{verbatim}
        >> sum(v)

        ans =

            118

        >>
    \end{verbatim}
    % \item[Media dei valori:] \texttt{mean(v)} mi ritorna il valore medio dei numeri del vettore. In questo caso:
    \item[Creare matrici di numeri random:] \texttt{randi(\textit{r, l, c})} mi ritorna un array di \texttt{\textit{l}} righe e \texttt{\textit{c}} colonne di numeri scelti randomicamente in un range ampio \texttt{\textit{r}}. 
    \begin{verbatim}
        >> v = randi(5,1,10)

        v =

            1   5   1   4   5   5   1   2   2   5

        >>
    \end{verbatim}
    \item[Trovare un valore uguale ad un numero dato in un array:] mi ritorna un vettore booleano che MatLab chiama \textit{vettori logici} che mi dice dove la condizione che ho espresso è vera, ovvero il valore del vettore è uguale al numero dato quando c'è 1.
    \begin{verbatim}
        >> v == 5

        ans =

            0   1   0   0   1   1   0   0   0   1

        >>
    \end{verbatim}
    Non è male perché è una semplice riga di istruzione, mi evita cicli espliciti e altra roba.
    \item[Trovare i valori maggiori di un numero dato:] mi ritorna un \textit{vettore logico} che mi dice dove la condizione che ho espresso è vera.
    \begin{verbatim}
        >> v>3

        ans =

            0   1   0   1   1   1   0   0   0   1

        >>
    \end{verbatim}
    Sono operazioni molto utili. E combinabili!
    \begin{verbatim}
        >> sum(v>3)

        ans =

            5

        >>
    \end{verbatim}
    Mi conta quanti sono gli 1 del vettore logico.\\
    Posso usare variabili di appoggio:
    \begin{verbatim}
        >> x = (v>3)

        ans =

            0   1   0   1   1   1   0   0   0   1

        >> v

        v =

            1   5   1   4   5   5   1   2   2   5

        >>
    \end{verbatim}
    \item[Selezionare solo alcuni valori:]
    \begin{verbatim}
        >> v(x)

        ans =

            5   4   5   5   5

        >>
    \end{verbatim}
    Praticamente mi seleziona solo i valori che hanno 1 nel vettore logico.\\
    \textbf{Molto utile per creare le maschere!}
    \begin{verbatim}
        >> v([1,3,4,6])

        ans =

            1   1   4   5

        >>
    \end{verbatim}
    Questo invece mi ritorna i valori che mi interessano, che ho chiesto esplicitamente.\\    
    Posso selezionare solo i valori che hanno 1 nel vettore logico anche in un altro modo:
\end{description}
