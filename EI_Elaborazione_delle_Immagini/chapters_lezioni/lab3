\section{Lab3}
\subsection{Es.1 - Filtro mediano}
Per ogni pixel da processare, prende l-intorno lo analizza e valuta il filtro da applicare.\\ Non lineare.\\ Perfetto per rimuovere rumore s\&p. Non genera nuovi valori nell'immagine ma rigenera quelli già presenti.\\
Rimane un pixel di rumore, come mai? Ale ha detto la risposta ma non mi ricordo.\\
Il f.m. è un buon filtro, ma attenzione: a seconda della dimensione aumento o diminuisco la probabilità di beccare un filtro di rumore.\\
Con 5x5 invece di 3x3 sparisce il pixel bianco.\\
Ad aumentare il filtro spariscono i pixel residui di rumore ma si perdono dettagli dell'immagine.\\
Filtro troppo alti me la rendono "cartoonizzata", mantiene i bordi ma sfoca le singole regioni.

\subsection{Es.2 - Immagini a colori, spazio RGB}
Non sono array \textbf{bidimensionali} ma \textbf{tridimensionali}.\\
Un canale colore è la risposta di un filtro che seleziona una certa regione della lunghezza d'onda del visibile (ovvero quanto il dispositivo di acquisizione è stato sensibile nell'acquisizione delle lunghezze elettromagnetiche). Queste risposte sono convertite in numeri.\\
Es.: rosso, quanto è presente l'onda elettromagnetica della regione che corrisponde al rosso? Si comporta (\textit{\textbf{in ogni singolo canale}}) come il livello di grigio, perché mi calcola l'intensità del colore di quel canale (banalmente, noi lo traduciamo con "quanto colore c'è").\\
Come facciamo a prendere ogni singolo canale? "Facciamo a fette" l'immagine.
\begin{verbatim}
    R = balls(:,:,1);
    G = balls(:,:,2);
    B = balls(:,:,3);
\end{verbatim}
Perché nella foto del matrimonio il piattino nel canale G è grigio scuro e non bianco? Perché  i colori non sono esattamente così come li percepiamo noi, il verde eventualmente lì non è verde puro e quindi il canale G non è prominente in quella regione rispetto agli altri colori.\\
NB: il bianco non è assenza di informazione, ma esattamente il contrario.\\
Perché il canale blu non è tutta nera? Perché il blu è contenuto in altri colori, tipo bianco del tovagliolo, grigio del tavolo, \dots Invece c'è assenza totale di blu ad es. dove c'è l'arancione per dire.\\
TIPICA DOMANDA DEGLI SCRITTI.\\
Ricorda:
\begin{description}
    \item[nero puro:] assenza di tutta l'informazione del colore.
    \item[bianco puro:] presenza di tutta l'informazione del colore.
    \item[grigio:] presenza di informazione colore di tutti e tre i canali ma in quantità equa.
\end{description}

\subsubsection{Spazio HSV}
Ma non basta RGB? Dipende dall'utilizzo che ne facciamo. Danno informazioni che da RGB non posso avere. Ce ne sono decine di spazi colori, noi a teoria ne abbiamo visti alcuni.\\
HSV codifica dello spazio colore che dà informazioni su tinta, saturazione e valore.

\subsection{Es.3}
YCbCr\\
Y canale informazione luminanza, ovvero la quantità di luce che c'è in un punto, quanto è forte quel pixel in quella posizione.\\
Cb dice quanto è blu il colore.\\
Cr dice quanto è rosso il colore.\\
Cb e Cr dicono contemporaneamente quanto è blu vs quanto verde c'è. Parlano di un rapporto fra regioni.\\
\texttt{imshow} considera quello che gli do come un'immagine di livelli di grigio o RGB. Quindi reinterpreta i valori che gli passo con colori sfalsati. Noi però abbiamo YCbCr, quindi l'immagine non ha senso. I singoli canali invece vanno bene.\\
Blu verso giallognolo, rosso verso verde.\\
Si possono processare le immagini indipendentemente dall'intensità della luce.
Nell'equazione (prodotto matrice per vettore) il primo vettore, a sinistra del $+$, è l'offset. Ho tutto traslato in un range positivo (lo 0, l'assenza di colore, è pura Y e Cr e Cb a 128, perché da una parte andiamo sul blu e dall'altra sul giallo).\\
\\ HSV\\ Trasformazione non lineare di RGB.\\
H (angolo, codificata come cerchio) - tinta - percezione del colore.\\
S (valore lineare) - saturazione - quanto è "pieno".\\
V (valore lineare) - value - intensità luminosa.\\

Big big nope: non fare istogramma per H. Il valore a 0 e a 360 sono uguali (siamo in un cerchio), bisognerebbe fare un istogramma circolare \texttt{(?!)}.

\subsection{Es.4 - Rumore nelle immagini a colore}
Spacchetto nei tre canali poi ricostruisco l'immagine con i canali filtrati tramite il comando:
\begin{verbatim}
    R2 = imfilter(R,GF);
    ...
    im = cat(3,R2,G2,B2);
\end{verbatim}
3 dimensioni perché vuole in quante direzioni e quali.\\
Posso fare direttamente
\begin{verbatim}
    face3 = imfilter(face,GF);
\end{verbatim}
Perché le immagini a colori vengono filtrate per canale in automatico.

\subsection{Es.5}
Rumore spike, sono valori molto netti. Rumore s\&p colorato.\\
Applichiamo filtro mediano (quello che si usa nel caso di s\&p). Problema: per matlab è bidimensionale il filtro mediano. Dobbiamo spacchettare nei canali.\\
Plot-twist: esiste \texttt{medfilt3} che fa il filtro mediano in 3 dimensioni.

\subsection{Es.6}
Non ho scritto niente.

\subsection{Es.7}
Filtri di edge, lineari, nella convoluzione otteniamo sia val pos che neg perché approssimano le derivate.\\
A noi interessa di più l'effetto finale.\\
Esiste la funzione \texttt{edge} che applica un filtro di gradiente e una sogliatura e mi ritorna un'immagine binaria con i bordi.\\
Il filtro di Prewitt è un filtro derivativo del 1 ordine (derivata prima).\\
Il filtro di Sobel è un filtro derivativo del 2 ordine (derivata seconda).\\
Così soglia automatica:
\begin{verbatim}
    im = im2double(imread('mondrian.jpg'));
    gray = rgb2gray(im);
    ep = edge(gray, "prewitt");
    es = edge(gray, "sobel");
    figure,
    subplot(2,2,1), imshow(im), title('A colori')
    subplot(2,2,2), imshow(gray), title('B&N')
    subplot(2,2,3), imshow(ep), title('Prewitt')
    subplot(2,2,4), imshow(es), title('Sobel')
\end{verbatim}
Giocando con la soglia:
\begin{verbatim}
    im = im2double(imread('mondrian.jpg'));
    gray = rgb2gray(im);
    ep = edge(gray, "prewitt");
    es = edge(gray, "sobel");
    figure,
    subplot(2,2,1), imshow(im), title('A colori')
    subplot(2,2,2), imshow(gray), title('B&N')
    subplot(2,2,3), imshow(ep), title('Prewitt')
    subplot(2,2,4), imshow(es), title('Sobel')
\end{verbatim}
Canny invece è un algoritmo, non filtro lineare, e difatti è il migliore finora.\\
QUANDO SI FA IL PROCESSING DELLE IMMAGINI, ATTENZIONE ALL'ORDINE CON CUI SI FANNO LE COSE! Prima si toglie il rumore, poi si fanno i fltri. Prima i filtri, poi gli edge. Eventualmente, poi tolgo gli edges che non mi interessano.