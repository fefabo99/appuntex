\chapter{Reti e livelli di rete}
\section{Architettura a strati}
N.B: livelli e strati sono sinonimi qua. Partiamo dal presupposto che le reti hanno una struttura complessa. Esiste una possibilità di studiare e organizzare questa struttura? Un modo è quello di suddividere la complessa struttura in strati, ognuno dei quali si occupa di servizi diversi ed è in comunicazione solo con quelli \textbf{\textit{immediatamente} adiacenti}.

\subsubsection{Perché fare strati?}
La stratificazione di un sistema permette di andare a definire un modello di riferimento e permette un'identificazione semplice delle relazioni dei vari pezzi del nostro sistema. La modellizzazione è vantaggiosa perché se vado a modificare l'implementazione di una componente, questo risulta essere trasparente a tutto il sistema e non va ad impattare sull'implementazione degli altri.

\subsection{Architettura a strati dell'Internet}
\begin{wrapfigure}{R}{0.15\textwidth}
    \begin{center}
        \includegraphics[width=0.125\textwidth]{images/aa2324/R_architetturaastrati1.jpg}
    \end{center}
\end{wrapfigure}
Anche nota come \textit{Layered Internet protocol stack}, lo stack protocollare si legge dall'alto verso il basso.
\begin{description}
    \item[applicativo:] supporta applicazioni di rete.\\
    Es.: HTTP (non vedremo), SMTP (protocollo per l'invio di mail), DNS (vedremo fra un attimo).
    \item[trasporto:] trasferisce i dati tra processi diversi eseguiti (di solito) su macchine diverse.\\
    Es.: TCP, UDP.
    \item[rete:] instrada i datagrammi (pacchetti a livello di rete) da sorgente a destinazione.\\
    Es.: IP, routing protocols.
    \item[link:] trasferisce i dati tra nodi, elementi di rete, adiacenti.\\
    Es.: Ethernet, 802.11 (WiFi).
    \item[fisico:] trasferisce i bit su un canale fisico.\\
    \`E il livello che non vedremo.
\end{description}

\section{Servizi, stratificazione, incapsulamento}
In che modo posso andare effettivamente ad implementare i vari servizi nei vari livelli?

\subsection{A livello di sorgente}
I livelli \textbf{applicativi} si scambiano messaggi per implementare specifici servizi.\\
Questi messaggi vengono trasportati sfruttando i servizi offerti dai livelli di \textbf{trasporto}. Questi livelli di \textit{trasporto} hanno il compito di far comunicare diversi processi su macchine diverse e possono trasferire i messaggi (nel caso di TCP) in maniera affidabile, garantendo che il messaggio arrivi in maniera corretta a destinazione.

\subsubsection{Incapsulamento}
Per implementare i servizi del livello di trasporto si fa in questo modo: 
\begin{itemize}
    \item Prendo i bit del mio messaggio ($M$) e ci attacco un'intestazione chiamata \textbf{\textit{Header}} ($H_t$), insieme di bit organizzati in \textbf{campi}.
    \item Il messaggio ($M$) prende il nome di \textbf{\textit{payload}} (strato applicativo).
    \item Il messaggio così ottenuto ($H_t + M$), che prende il nome di \textbf{\textit{segmento}} (strato di trasporto), viene passato al \textit{livello di rete} che è immediatamente sotto.
    \item Lo strato di rete (\textit{network}) prende il \textit{segmento} e ci aggiunge un \textbf{suo header}, il messaggio diventa così $H_n + H_t + M$, prende il nome di \textbf{\textit{datagram}} e viene passato al livello di link.
    \item Lo strato di link prende il \textit{datagramma} e ci aggiunge un \textbf{suo header}, il messaggio diventa così $H_l + H_n + H_t + M$, prende il nome di \textit{\textbf{frame} (trama)} e viene passato al livello fisico.
\end{itemize}
Così si crea la separazione fra i livelli, ogni livello vede i pochi bit passati dal livello precedente.\\
Alla fine arrivo ad avere un messaggio molto più lungo di quello originale, ma che contiene tutte le informazioni necessarie non ai fini del messaggio ma piuttosto per il funzionamento del sistema. Tutta la parte in eccesso (oltre al \textit{payload} $M$) prende il nome di \textit{\textbf{overhead}} ($H_l + H_n + H_t$).
In breve, l'incapsulamento, prende e aggiunge l'intestazione (unica cosa che guarderò) senza preoccuparmi di ciò che ci sta prima (payload). Il succo è che ad ogni livello aggiungi un header.\\
Il messaggio non viene inviato finché non è stato completamente incapsulato. Deve attraversare tutto il percorso stratificato fino ad arrivare allo strato fisico e poi viene inviato al destinatario.

\subsection{A livello di destinazione}
Percorso inverso, partendo dal livello fisico e continuando fino ad arrivare al livello applicativo, si tolgono gli header e si ottiene il messaggio originale.
\begin{itemize}
    \item Lo strato di link prende il \textbf{frame} e toglie il suo header $H_l$, il \textbf{frame} diventa quindi $H_n + H_t + M$ e viene passato allo strato di rete.
    \item Lo strato di rete prende il \textbf{datagram} e toglie il suo header $H_n$, il \textbf{datagram} diventa quindi $H_t + M$ e viene passato allo strato di trasporto.
    \item Lo strato di trasporto prende il \textbf{segmento} e toglie il suo header $H_t$, il \textbf{segmento} diventa quindi $M$ ovvero il mio \textit{payload} e viene passato allo strato applicativo.
\end{itemize}

\subsubsection{A livello di commutatori}
Negli \textit{end-host} (sistemi periferici) ovviamente ci sono \textbf{tutti e 5} gli strati, a livello di commutatori invece è diverso: \underline{ci sono solo i primi 2} (switch) \underline{o 3 strati} (router), ovvero il \textit{livello fisico}, quello \textit{di link} e quello \textit{di rete}.\\
I router sono dotati di \textit{commutatori di livello 3}.\\
\textbf{Es. semplice:}
\begin{center}
    \includegraphics[width=0.35\textwidth]{images/aa2324/R_architetturaastrati3.jpg}
\end{center}
In questo caso:
\begin{itemize}
    \item il \textit{frame} ($H_l + H_n + H_t + M$) creato dal mittente passa al router, che abbiamo detto avere \textit{solo strato fisico, di link, di rete}. 
    \item Il router toglie l'header ($H_l$) del livello \textit{di link} e inoltra il messaggio al livello \textit{di rete}. 
    \item Il livello \textit{di rete} prende il messaggio ($H_n + H_t + M$) e lo incapsula con un header diverso (che noi chiamiamo $H_n'$).
    \item Il \textit{datagramma} così ottenuto ($H_n' + H_n + H_t + M$) viene incapsulato in una nuova \textit{trama} e inviato al destinatario.
\end{itemize}
Quindi \underline{in due punti diversi del percorso} lo stesso messaggio potrebbe essere incapsulato \underline{in due header diversi}, e questo succede perché magari in quei due punti del percorso vengono usati \underline{due protocolli internet diversi}.
